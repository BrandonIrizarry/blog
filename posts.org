#+title: Some Programs
#+startup: logdone


* DONE About
  CLOSED: [2025-09-22 Mon 11:44]
  :properties:
  :export_hugo_section: about
  :export_file_name: about
  :end:

** About Me

   My name is Brandon Irizarry. I write about stuff that interests me
   on this blog. That can, as is mandated by tradition, include
   software and other tech-related projects I'm working on (or with),
   but can come to include other hobbies as well, like playing
   keyboard (and music in general.)

* Projects
  :properties:
  :export_hugo_section: projects
  :export_file_name: projects
  :end:

  Summaries and links to my various projects will go here.
  
* Posts
  :properties:
  :export_hugo_section: posts
  :export_options: toc:headlines
  :end:

  This heading exists mainly so that subtrees inherit ~posts~ as their
  "Hugo section" value.
    
** DONE Hello Hugo                                                 :hugo:org:
   CLOSED: [2025-09-22 Mon 11:36]
   :properties:
   :export_file_name: hello-hugo
   :export_hugo_custom_front_matter: :summary "Hugo, Ox Hugo and GitHub Pages â†’ this website."
   :end:

*** Introduction
   After floundering about unsuccessfully with Hugo in the past, this
   time things finally clicked. One thing that helped me greatly here
   was becoming acquainted with Go; and so, for example, things that
   looked strange before, like Hugo templates, are now a familiar
   idiom.

   It's remarkable the degree to which software engineering skills are
   built upon a foundation of familiarity with lore.[fn:1] After
   becoming familiar with backend web development, the idea of
   "starting a local server" (for example, to preview one's website)
   was no longer as weird as it was before.

   I was overjoyed to find out that Hugo supports Emacs Org Mode
   natively! However, I quickly found out[fn:2] that the recommended
   approach is to use Ox Hugo, something else with which I had toyed
   with but ultimately failed to understand - and, as in the case of
   Hugo itself, finally grokked.

*** Some Backstory
    I needed a website - the one you're reading now - because, at the
    time of this writing, I'm looking for a full-time software
    developer position.  Now, without falling into some sort of
    pernicious Dunning-Kruger tarpit, I can assert confidently that, in
    my university years as a CS major in the early 2000's, I was /bad/
    at programming; I was arguably one of the worst in my
    class. Functional programming? Forget it: recursion was completely
    over my head. Low-level? Had no idea how to write C. You get the
    idea.

    However, over the years, something clicked where I felt I really
    needed to get back into the loop of coding; after all, I had this
    degree, but had never used it. Such a discrepancy began to weigh
    down on me, and, once I started having a bit of free time here and
    there, I began the effort to reform myself according to what I had
    professed previously as my declared profession.

    Interestingly, one thing that my university years /did/ give me was
    a taste for Emacs. This occured while taking an Operating Systems
    course, where the lab computers were outfitted with Emacs, which we
    would use to edit our source files for our projects. Now looking
    back at that time, I suppose it was enlightened of them to "make
    us" use Emacs. To this day, when editing code, I make use of a
    shortcut for copying a line a fellow lab user had shown us: ~C-k~
    followed by a quick ~C-y~ to first cut away the line and then
    quickly paste it back where it was, so that it would remain in
    Emacs's kill ring for pasting in somewhere else.

    And so, in recent years I've been brushing up on old skills, and
    building new ones. I've picked up acquaintance with quite a few
    languages out there, some feverishly popular, and some less
    popular.

    One such language was Lua. I have a soft spot for Lua. Lua 5.3 was
    the first programming language I learned /well enough/ to write
    serious, lengthy programs in[fn:3]. The book /Programming in Lua/[fn:4] is
    fantastically well-written, arguably on par with K&R in this
    respect. The chapter on Lua patterns primed my brain to finally
    truly understand regular expressions later on.

    Programming can be hard at first, but practice and determination
    really do make perfect.

*** Enter Hugo

    As I stated earlier, I was now able to hit the ground running with
    Hugo, while writing my blog posts in a format I enjoy:
    Org. Markdown, while it gets the job done, feels in comparison a
    bit unwieldy and lacking[fn:5]. Nevertheless, it would seem that Markdown
    is itself a kind of accepted /lingua franca/ for developers
    nowadays, and so I resort to it when the occasion calls.

    There's an excellent blog post[fn:6] that details getting set up
    with Hugo. The author frames his explanation in the context of
    Windows and PowerShell, but I nevertheless found the essential
    instructions quite clear. Let's of course not forget the
    documentation at [[https://gohugo.io][gohugo.io]].

    For people interested in Emacs and Ox Hugo, there's also
    [[https://ox-hugo.scripter.co/][ox-hugo.scripter.co]].

    I was tempted to rehearse in full the steps I took to get this site
    up and running. However, there are already resources online for
    that, which fall into one of two categories:

    1. The official docs, which are always up-to-date and infallible,
       but are sometimes unideal for "quickstarting";
      
    2. Blog posts (this includes SO), which are to-the-point and are
       geared towards mere mortals, but which also inevitably fall into
       obsolesence, since they by definition don't fall into the first
       category, and so there isn't even an implied responsibility to
       keep them up-to-date.[fn:7] 

    And so what worked for me in the end was start with category #2,
    and fill in any necessary gaps with a combination of category #1,
    and experience from having made mistakes while attempting category
    #2.

    However, I feel comfortable /summarizing/ what I did:

    1. Use ~go install~ to build the Hugo extend/deploy edition from
       source. Despite being a "build from source", I found this to be
       surprisingly painless.[fn:8]
      
    2. Get all the boilerplate in place: create a new Hugo site,
       initialize a Git repository with an appropriate ~.gitignore~,
       and initialize a new Hugo module.

    3. Install a Hugo theme (it looks like there are various ways to do
       this.)

    4. Set up a "one post per Org subtree" Ox Hugo workflow.

    5. Preview your site with ~hugo serve~.

    6. Deploy your site to GitHub Pages. Note that, since you're using
       Hugo, you need to rely on GitHub Actions to accomplish this,
       which I found a bit tricky to set up at first.


    And there it is. To be honest, I'm still somewhat in the throes of
    learning Hugo, and so this is merely something to give my blog
    content a conceptually satisfying first post serving as a
    "bootstrapping" introduction to itself.


* Footnotes

[fn:8] I'm installing for GNU/Linux. 
[fn:7] I experienced this quite directly while attempting to follow
instructions to deploy my site to GitHub Pages. Moral of the story:
the official Hugo site is where to get the necessary ~yaml~ file. ðŸ˜‘

[fn:5] However, Markdown Mode for Emacs is nevertheless excellent, and
can make editing Markdown almost feel like you're editing Org!

[fn:3] I had actually used it to complete the /Nand to Tetris/ course
on Coursera. Perhaps not as popular a choice as, say, Java or Python,
but hey - I was more interested in Lua at the time.

[fn:6] https://mikefrobbins.com/2023/10/26/building-and-deploying-a-blog-with-hugo-and-github-pages/

[fn:9] https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/index.html 

[fn:4] Lua 5.0 edition available here: https://www.lua.org/pil/contents.html

[fn:1] Arguably, this is why a lot of people famously find coding
difficult at first: there's a lot of /implied/ know-how one really
needs to come to the table with in order to be successful at the
endeavor. Proficiency in matters of software can often be a sub-linear
bootstrapping process.

[fn:2] https://weblog.masukomi.org/2024/07/19/using-org-mode-with-hugo/ 
